openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/{profile}/assets:
    post:
      operationId: assets_create
      description: ''
      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Asset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Asset'
          '*/*':
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: ''
      summary: Uploads a static asset file
  /api/{profile}/assets/{path}:
    get:
      operationId: assets_retrieve
      description: ''
      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: ''
      summary: Expiring link to download asset file
    delete:
      operationId: assets_destroy
      description: ''
      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Deletes static assets file
  /api/{profile}/benchmarks:
    get:
      operationId: benchmark_index
      description: ''
      parameters:
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      tags: []
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against all profiles
  /api/{profile}/benchmarks/{editable_filter}:
    get:
      operationId: editable_filter_benchmark_index
      description: |2+

        Returns a list of questions decorated with a 'benchmarks' field
        that contains aggregated statistics accross the set of profiles
        selected by the `{editable_filter}` filter.

        The set of profiles whose responses are taken into account in
        the aggregate can be reduced to a subset of profiles created
        in the time period [accounts_start_at, accounts_ends_at[.

        Aggregation can be done for samples created in the time period
        [start_at,ends_at[, either as a whole period, or as period
        trenches (`yearly`, `monthly`).

        When `period_type` is specified, `nb_periods` and `ends_at` can
        be used instead of `start_at` to filter the samples.

      parameters:
      - in: query
        name: accounts_ends_at
        schema:
          type: string
          minLength: 1
        description: end of the range as a date/time in ISO 8601 format
      - in: query
        name: accounts_start_at
        schema:
          type: string
          minLength: 1
        description: start of the range as a date/time in ISO 8601 format
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: string
        description: Unit to return values in
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against selected profiles
  /api/{profile}/benchmarks/{editable_filter}/{path}:
    get:
      operationId: benchmarks_list
      description: |2+

        Returns a list of questions whose path is prefixed by `{path}`,
        decorated with a 'benchmarks' field that contains aggregated statistics
        accross the set of profiles selected by the `{editable_filter}` filter.

        The set of profiles whose responses are taken into account in
        the aggregate can be reduced to a subset of profiles created
        in the time period [accounts_start_at, accounts_ends_at[.

        Aggregation can be done for samples created in the time period
        [start_at,ends_at[, either as a whole period, or as period
        trenches (`yearly`, `monthly`).

        When `period_type` is specified, `nb_periods` and `ends_at` can
        be used instead of `start_at` to filter the samples.

      parameters:
      - in: query
        name: accounts_ends_at
        schema:
          type: string
          minLength: 1
        description: end of the range as a date/time in ISO 8601 format
      - in: query
        name: accounts_start_at
        schema:
          type: string
          minLength: 1
        description: start of the range as a date/time in ISO 8601 format
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: string
        description: Unit to return values in
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against selected profiles for a subset of questions
  /api/{profile}/benchmarks/accessibles:
    get:
      operationId: accessibles_benchmark_index
      description: |2+

        Returns a list of questions decorated with a 'benchmarks' field
        that contains aggregated statistics accross the set of profiles
        accessible to a grantee `{profile}`.

        The set of profiles whose responses are taken into account in
        the aggregate can be reduced to a subset of profiles accessbile
        in the time period [accounts_start_at, accounts_ends_at[.

        Aggregation can be done for samples created in the time period
        [start_at, ends_at[, either as a whole period, or as period
        trenches (`yearly`, `monthly`).

        When `period_type` is specified, `nb_periods` and `ends_at` can
        be used instead of `start_at` to filter the samples.

      parameters:
      - in: query
        name: accounts_ends_at
        schema:
          type: string
          minLength: 1
        description: end of the range as a date/time in ISO 8601 format
      - in: query
        name: accounts_start_at
        schema:
          type: string
          minLength: 1
        description: start of the range as a date/time in ISO 8601 format
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: string
        description: Unit to return values in
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against accessible profiles
  /api/{profile}/benchmarks/accessibles/{path}:
    get:
      operationId: benchmarks_accessibles_list
      description: |2+

        Returns a list of questions whose path is prefixed by `{path}`,
        decorated with a 'benchmarks' field that contains aggregated statistics
        accross the set of profiles accessible to a grantee `profile`.

        The set of profiles whose responses are taken into account in
        the aggregate can be reduced to a subset of profiles accessbile
        in the time period [accounts_start_at, accounts_ends_at[.

        Aggregation can be done for samples created in the time period
        [start_at,ends_at[, either as a whole period, or as period
        trenches (`yearly`, `monthly`).

        When `period_type` is specified, `nb_periods` and `ends_at` can
        be used instead of `start_at` to filter the samples.

      parameters:
      - in: query
        name: accounts_ends_at
        schema:
          type: string
          minLength: 1
        description: end of the range as a date/time in ISO 8601 format
      - in: query
        name: accounts_start_at
        schema:
          type: string
          minLength: 1
        description: start of the range as a date/time in ISO 8601 format
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: string
        description: Unit to return values in
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against accessible profiles for a subset of questions
  /api/{profile}/benchmarks/all:
    get:
      operationId: benchmark_all_index
      description: |2+

        Returns a list of questions decorated with a 'benchmarks' field
        that contains aggregated statistics accross the set of all profiles
        on the platform.

        Aggregation can be done for samples created in the time period
        [start_at,ends_at[, either as a whole period, or as period
        trenches (`yearly`, `monthly`).

        When `period_type` is specified, `nb_periods` and `ends_at` can
        be used instead of `start_at` to filter the samples.

      parameters:
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against all profiles
  /api/{profile}/benchmarks/all/{path}:
    get:
      operationId: benchmarks_all_list
      description: |2+

        Returns a list of questions decorated with a 'benchmarks' field
        that contains aggregated statistics accross the set of all profiles
        on the platform.

        Aggregation can be done for samples created in the time period
        [start_at,ends_at[, either as a whole period, or as period
        trenches (`yearly`, `monthly`).

        When `period_type` is specified, `nb_periods` and `ends_at` can
        be used instead of `start_at` to filter the samples.

      parameters:
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against all profiles for a subset of questions
  /api/{profile}/benchmarks/engaged:
    get:
      operationId: engaged_benchmark_index
      description: |2+

        Returns a list of questions decorated with a 'benchmarks' field
        that contains aggregated statistics accross the set of profiles
        engaged by a `profile`.

        The set of profiles whose responses are taken into account in
        the aggregate can be reduced to a subset of profiles engaged
        in the time period [accounts_start_at, accounts_ends_at[.

        Aggregation can be done for samples created in the time period
        [start_at,ends_at[, either as a whole period, or as period
        trenches (`yearly`, `monthly`).

        When `period_type` is specified, `nb_periods` and `ends_at` can
        be used instead of `start_at` to filter the samples.

      parameters:
      - in: query
        name: accounts_ends_at
        schema:
          type: string
          minLength: 1
        description: end of the range as a date/time in ISO 8601 format
      - in: query
        name: accounts_start_at
        schema:
          type: string
          minLength: 1
        description: start of the range as a date/time in ISO 8601 format
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: string
        description: Unit to return values in
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against engaged profiles
  /api/{profile}/benchmarks/engaged/{path}:
    get:
      operationId: benchmarks_engaged_list
      description: |2+

        Returns a list of questions whose path is prefixed by `{path}`,
        decorated with a 'benchmarks' field that contains aggregated statistics
        accross the set of profiles engaged by a `profile`.

        The set of profiles whose responses are taken into account in
        the aggregate can be reduced to a subset of profiles engaged
        in the time period [accounts_start_at, accounts_ends_at[.

        Aggregation can be done for samples created in the time period
        [start_at,ends_at[, either as a whole period, or as period
        trenches (`yearly`, `monthly`).

        When `period_type` is specified, `nb_periods` and `ends_at` can
        be used instead of `start_at` to filter the samples.

      parameters:
      - in: query
        name: accounts_ends_at
        schema:
          type: string
          minLength: 1
        description: end of the range as a date/time in ISO 8601 format
      - in: query
        name: accounts_start_at
        schema:
          type: string
          minLength: 1
        description: start of the range as a date/time in ISO 8601 format
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: string
        description: Unit to return values in
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against engaged profiles for a subset of questions
  /api/{profile}/campaigns:
    get:
      operationId: campaigns_list
      description: |2+

        Lists campaigns that belongs to a profile.

      parameters:
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: sort by created_at, title. If a field is preceded by a minus
          sign ('-'), the order will be reversed. Multiple 'o' parameters can be specified
          to produce a stable result.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: value to search for in the fields specified by q_f
        schema:
          type: string
      - name: q_f
        required: false
        in: query
        description: 'restrict searches to one or more fields in: title. searches
          all fields when unspecified.'
        schema:
          type: string
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCampaignList'
          description: ''
      summary: Lists profile campaigns
    post:
      operationId: campaigns_create
      description: |2+

        Creates a campaign against which profiles can be assessed.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CampaignCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CampaignCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignCreate'
          description: ''
      summary: Creates a campaign
  /api/{profile}/campaigns/{campaign}:
    get:
      operationId: campaigns_retrieve
      description: |2+

        Retrieves the details of a ``Campaign``.

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignDetail'
          description: ''
      summary: Retrieves a campaign
    delete:
      operationId: campaigns_destroy
      description: |2+

        Removes a ``Campaign`` and all associated ``Sample``.
        The underlying ``Answer`` that were grouped in a ``Sample`` remain
        present in the database. These ``Answer`` are just no longer grouped
        logically in a ``Sample``.

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Deletes a campaign
  /api/{profile}/filters/accounts:
    get:
      operationId: filters_accounts_list
      description: |2+

        Returns a list of `page_size` groups that belong to `{profile}`.

        The queryset can be further refined to match a search filter (``q``)
        and sorted on specific fields (``o``).

      parameters:
      - name: o
        required: false
        in: query
        description: sort by . If a field is preceded by a minus sign ('-'), the order
          will be reversed. Multiple 'o' parameters can be specified to produce a
          stable result.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: value to search for in the fields specified by q_f
        schema:
          type: string
      - name: q_f
        required: false
        in: query
        description: 'restrict searches to one or more fields in: slug, title. searches
          all fields when unspecified.'
        schema:
          type: string
      tags:
      - cohorts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEditableFilterList'
          description: ''
      summary: Lists defined group of profiles
    post:
      operationId: filters_accounts_create
      description: |2+

        After the group is created, nomminative profiles or
        select-profiles-by-answer filters can be added to it
        through `Adds a profile to a group  <#filters_accounts_add_item>`_
        endpoint.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - cohorts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditableFilterCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EditableFilterCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EditableFilterCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditableFilterCreate'
          description: ''
      summary: Creates a group of profiles
  /api/{profile}/filters/accounts/{editable_filter}:
    get:
      operationId: filters_accounts_list_item
      description: |2+

        Returns a list of `page_size` nomminative profiles and
        select-profiles-by-answer filters that form the group.

        `{profile}` must be the owner of the `{editable_filter}`.

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - cohorts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCohortList'
          description: ''
      summary: Lists profiles in a group
    post:
      operationId: filters_accounts_add_item
      description: |2+

        Either `full_name` (optionally `slug`) or a pair
        (`question`, `measured`) must be specified.

        When a `full_name`/`slug` is specified, the associated nomminative
        profile will be added to the group.

        When a (`question`, `measured`) pair is specified,
        a select-profiles-by-answer filter will be used
        to add all profiles that answered `measured` to a `question`
        to the group.

        `{profile}` must be the owner of the `{editable_filter}`.

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - cohorts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAdd'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CohortAdd'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CohortAdd'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAdd'
          description: ''
      summary: Adds a profile to a group
    put:
      operationId: filters_accounts_update
      description: |2+

        Updates the name of a group of profiles.

        `{profile}` must be the owner of the `{editable_filter}`.

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - cohorts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditableFilterUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EditableFilterUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EditableFilterUpdate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditableFilterUpdate'
          description: ''
      summary: Renames a group of profiles
    delete:
      operationId: filters_accounts_destroy
      description: |2+

        `{profile}` must be the owner of the `{editable_filter}`.

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - cohorts
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Deletes a group of profiles
  /api/{profile}/filters/accounts/{editable_filter}/{rank}:
    get:
      operationId: filters_accounts_retrieve_item
      description: |2+

        Returns the nominative profile or select-profiles-by-answer filter
        at index `{rank}` in the group `{editable_filter}`.

        `{profile}` must be the owner of the `{editable_filter}`.

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: rank
        schema:
          type: integer
        required: true
      tags:
      - cohorts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
          description: ''
      summary: Retrieves a selector in a group
    put:
      operationId: filters_accounts_update_item
      description: |2+

        Updates the selector at `{rank}` in the group `{editable_filter}`,
        and returns the updated nominative profile or select-profiles-by-answer
        filter.

        `{profile}` must be the owner of the `{editable_filter}`.

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: rank
        schema:
          type: integer
        required: true
      tags:
      - cohorts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cohort'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cohort'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cohort'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
          description: ''
      summary: Updates a selector in a group
    patch:
      operationId: filters_accounts_partial_update_item
      description: |2+

        Returns the nominative profile or select-profiles-by-answer filter
        at index `{rank}` in the group `{editable_filter}`.

        `{profile}` must be the owner of the `{editable_filter}`.

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: rank
        schema:
          type: integer
        required: true
      tags:
      - cohorts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCohort'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCohort'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCohort'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
          description: ''
      summary: Retrieves a selector in a group
    delete:
      operationId: filters_accounts_remove_item
      description: |2+

        Upon successful completion, the nomminative profile, or
        select-profiles-by-answer filter, at index `{rank}` will
        no longer be present in the group `{editable_filter}`.

        `{profile}` must be the owner of the `{editable_filter}`.

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: rank
        schema:
          type: integer
        required: true
      tags:
      - cohorts
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Removes a selector from a group
  /api/{profile}/filters/accounts/{editable_filter}/values:
    get:
      operationId: filters_accounts_values_by_subset
      description: |2+

        Returns a list of page_size records.
        XXX What was entered in the system?

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAnswerList'
          description: ''
      summary: Lists quantitative measurements for a group
    post:
      operationId: filters_accounts_values_create
      description: |2+

        Records numeric measurements towards a specific
        metric.

        When `baseline_at` is specified, the measurement refers to
        a relative value since `baseline_at`. When `baseline_at` is not
        specified, the intent is to record an absolute measurement at time
        `created_at`.

      parameters:
      - in: path
        name: editable_filter
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - assessments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditableFilterValuesCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EditableFilterValuesCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EditableFilterValuesCreate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditableFilterValuesCreate'
          description: ''
      summary: Records quantitative measurements
  /api/{profile}/filters/accounts/values:
    get:
      operationId: filters_accounts_values_list
      description: |2+

        Returns a list of page_size records.
        XXX What was entered in the system?

      parameters:
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDatapointList'
          description: ''
      summary: Lists quantitative measurements
  /api/{profile}/metrics/aggregate/{path}:
    get:
      operationId: metrics_aggregate_retrieve
      description: |2+

        Returns the aggregate of quantitative data for question `{path}`.

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: query
        name: unit
        schema:
          type: string
        description: Unit to return values in
      tags:
      - reporting
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
      summary: Retrieves aggregated quantitative measurements over a time period
  /api/{profile}/portfolios:
    get:
      operationId: portfolios_list
      description: |2+

        Lists all grants and requests that have to be accepted or denied
        by *account*.

        If you want to get all requests that have been initiated by *account*,
        see /api/{account}/requests. If you want to get all grants that have been
        initiated *account*, see /api/{account}/grants.

      parameters:
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: sort by grantee, account, state, ends_at. If a field is preceded
          by a minus sign ('-'), the order will be reversed. Multiple 'o' parameters
          can be specified to produce a stable result.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: value to search for in the fields specified by q_f
        schema:
          type: string
      - name: q_f
        required: false
        in: query
        description: 'restrict searches to one or more fields in: grantee__full_name,
          account__full_name. searches all fields when unspecified.'
        schema:
          type: string
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: state
        required: false
        in: query
        description: filter by state (grant-initiated, grant-accepted, grant-denied,
          grant-expired, request-initiated, request-accepted, request-denied, request-expired)
        schema:
          type: string
      tags:
      - portfolios
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPortfolioReceivedList'
          description: ''
      summary: Lists active grants and requests
  /api/{profile}/portfolios/grants:
    get:
      operationId: portfolios_grants_list
      description: |2+

        Lists all grants currently pending initiated by *account*.

      parameters:
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: sort by grantee, account, state, ends_at. If a field is preceded
          by a minus sign ('-'), the order will be reversed. Multiple 'o' parameters
          can be specified to produce a stable result.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: value to search for in the fields specified by q_f
        schema:
          type: string
      - name: q_f
        required: false
        in: query
        description: 'restrict searches to one or more fields in: grantee__full_name,
          account__full_name. searches all fields when unspecified.'
        schema:
          type: string
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: state
        required: false
        in: query
        description: filter by state (grant-initiated, grant-accepted, grant-denied,
          grant-expired, request-initiated, request-accepted, request-denied, request-expired)
        schema:
          type: string
      tags:
      - portfolios
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPortfolioOptInList'
          description: ''
      summary: Lists initiated grants
    post:
      operationId: portfolios_grants_create
      description: |2+

        Initiate a grant of data to a grantee

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - portfolios
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioGrantCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PortfolioGrantCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PortfolioGrantCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPortfolioOptInList'
          description: ''
      summary: Initiates grant
  /api/{profile}/portfolios/grants/{verification_key}:
    post:
      operationId: portfolios_grants_accept
      description: |2+

        An `account` has sent its portfolio to a `grantee`. The `grantee`
        accepts the request, making the `account`'s answers up-to-date `ends_at`
        available to `grantee`.

        Note that *account* parameter is the `grantee` we have send data to here,
        while the *account* parameter is the `account` owning that data  when
        calling `POST /api/{account}/grants`.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: verification_key
        schema:
          type: string
        required: true
      tags:
      - portfolios
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioOptIn'
          description: ''
      summary: Accepts grant
    delete:
      operationId: portfolios_grants_destroy
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: verification_key
        schema:
          type: string
        required: true
      tags:
      - portfolios
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Ignores grant
  /api/{profile}/portfolios/requests:
    get:
      operationId: portfolios_requests_list
      description: |2+

        Lists all requests currently pending initiated by *account*.

      parameters:
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: sort by grantee, account, state, ends_at. If a field is preceded
          by a minus sign ('-'), the order will be reversed. Multiple 'o' parameters
          can be specified to produce a stable result.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: value to search for in the fields specified by q_f
        schema:
          type: string
      - name: q_f
        required: false
        in: query
        description: 'restrict searches to one or more fields in: grantee__full_name,
          account__full_name. searches all fields when unspecified.'
        schema:
          type: string
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: state
        required: false
        in: query
        description: filter by state (grant-initiated, grant-accepted, grant-denied,
          grant-expired, request-initiated, request-accepted, request-denied, request-expired)
        schema:
          type: string
      tags:
      - portfolios
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPortfolioOptInList'
          description: ''
      summary: Lists initiated requests
    post:
      operationId: portfolios_requests_create
      description: |2+

        Initiate a request of data for an account.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - portfolios
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioRequestCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PortfolioRequestCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PortfolioRequestCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioRequestCreate'
          description: ''
      summary: Initiates request
  /api/{profile}/portfolios/requests/{verification_key}:
    post:
      operationId: portfolios_requests_accept
      description: |2+

        A `grantee` has made a request to *account*'s portfolio. The *account*
        accepts the request, making the *account*'s answers up-to-date `ends_at`
        available to `grantee`.

        Note that *account* is the actual *account* we are looking to access data
        from here, while the *account* parameter is the `grantee` when calling
        `POST /api/{account}/requests`.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: verification_key
        schema:
          type: string
        required: true
      tags:
      - portfolios
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioOptIn'
          description: ''
      summary: Accepts request
    delete:
      operationId: portfolios_requests_destroy
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: verification_key
        schema:
          type: string
        required: true
      tags:
      - portfolios
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Ignores request
  /api/{profile}/portfolios/requests/metadata/{target}:
    put:
      operationId: portfolios_requests_metadata_update
      description: |2+

        The requestor/grantor uses this API call to add metadata about
        the request/grant.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: target
        schema:
          type: string
        required: true
      tags:
      - portfolios
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioOptInUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PortfolioOptInUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PortfolioOptInUpdate'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioOptIn'
          description: ''
      summary: Updates extra field in a request/grant
    patch:
      operationId: portfolios_requests_metadata_partial_update
      description: |2+

        The requestor/grantor uses this API call to add metadata about
        the request/grant.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: target
        schema:
          type: string
        required: true
      tags:
      - portfolios
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPortfolioOptInUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPortfolioOptInUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPortfolioOptInUpdate'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioOptIn'
          description: ''
      summary: Updates extra field in a request/grant
  /api/{profile}/reporting/{campaign}/accessibles/{account}:
    delete:
      operationId: reporting_accessibles_destroy
      description: |2+

      parameters:
      - in: path
        name: account
        schema:
          type: string
        required: true
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - sharing
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Removes access to a profile samples
  /api/{profile}/reporting/{campaign}/benchmarks:
    get:
      operationId: reporting_benchmarks_index
      description: ''
      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      tags: []
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: Aggregated benchmark for requested accounts
  /api/{profile}/reporting/{campaign}/benchmarks/{path}:
    get:
      operationId: reporting_benchmarks_list
      description: ''
      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: nb_periods
        required: false
        in: query
        description: number of periods
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - name: period_type
        required: false
        in: query
        description: aggregate period (yearly or monthly)
        schema:
          type: string
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      tags: []
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleBenchmarksList'
          description: ''
      summary: XXX deprecated API - Aggregated benchmark for requested accounts
  /api/{profile}/reporting/{campaign}/compare:
    get:
      operationId: reporting_compare_list
      description: ''
      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompareQuestionList'
          description: ''
      summary: Lists compared samples
  /api/{profile}/reporting/{campaign}/compare/{path}:
    get:
      operationId: reporting_compare_list_2
      description: ''
      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompareQuestionList'
          description: ''
      summary: Lists compared samples
  /api/{profile}/reporting/{campaign}/completion-rate:
    get:
      operationId: reporting_completion_rate_retrieve
      description: |2+

        Returns the week-by-week percentage of requested accounts
        that have completed a scorecard.

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - reporting
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'
          description: ''
      summary: Retrieves week-by-week completion rate
  /api/{profile}/reporting/{campaign}/engaged:
    get:
      operationId: reporting_engaged_list
      description: |2+


        reporting_status can be one of:
        - invited
        - updated / work-in-progress
        - completed
        - declined (to respond)
        - completed declined to share

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: value to search for in the fields specified by q_f
        schema:
          type: string
      - name: q_f
        required: false
        in: query
        description: 'restrict searches to one or more fields in: slug, full_name,
          email. searches all fields when unspecified.'
        schema:
          type: string
      tags:
      - reporting
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEngagementList'
          description: ''
      summary: Lists engagement for reporting profiles
  /api/{profile}/reporting/{campaign}/engaged/stats:
    get:
      operationId: reporting_engaged_stats_retrieve
      description: |2+

        Returns the engagement as of Today

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - reporting
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'
          description: ''
      summary: Retrieves up-to-date engagement rate
  /api/{profile}/reporting/{campaign}/matrix:
    get:
      operationId: reporting_matrix_list
      description: ''
      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMatrixList'
          description: ''
      summary: Lists matrices
    post:
      operationId: reporting_matrix_create
      description: ''
      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Matrix'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Matrix'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Matrix'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Matrix'
          description: ''
      summary: Creates a new matrix
  /api/{profile}/reporting/{campaign}/matrix/{path}:
    get:
      operationId: reporting_matrix_retrieve
      description: |2+

        Uses the total score for each organization as recorded
        by the assessment surveys and present aggregates
        by industry sub-sectors (Boxes & enclosures, etc.)

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - reporting
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Matrix'
          description: ''
      summary: Retrieves a matrix of scores for cohorts against a metric
    put:
      operationId: reporting_matrix_update
      description: |2+

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - reporting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Matrix'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Matrix'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Matrix'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Matrix'
          description: ''
      summary: Updates a matrix of scores for cohorts against a metric
    patch:
      operationId: reporting_matrix_partial_update
      description: |2+

        Uses the total score for each organization as recorded
        by the assessment surveys and present aggregates
        by industry sub-sectors (Boxes & enclosures, etc.)

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - reporting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMatrix'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMatrix'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMatrix'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Matrix'
          description: ''
      summary: Retrieves a matrix of scores for cohorts against a metric
    delete:
      operationId: reporting_matrix_destroy
      description: |2+

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - reporting
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Deletes a matrix of scores for cohorts against a metric
  /api/{profile}/reporting/notes:
    get:
      operationId: reporting_notes_retrieve
      description: |2+

        Returns the verification completed week-by-week.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - reporting
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'
          description: ''
      summary: Retrieves week-by-week verification rate
  /api/{profile}/sample:
    get:
      operationId: sample_list
      description: |2+

        Returns all samples for a profile

      parameters:
      - name: ends_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: sort by created_at, campaign__title, is_frozen. If a field is
          preceded by a minus sign ('-'), the order will be reversed. Multiple 'o'
          parameters can be specified to produce a stable result.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: start_at
        required: false
        in: query
        description: date/time in ISO 8601 format
        schema:
          type: string
      - name: state
        required: false
        in: query
        description: filter by state (active, completed)
        schema:
          type: string
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExtendedSampleList'
          description: ''
      summary: Lists samples
    post:
      operationId: sample_create
      description: |2+

        Creates a new sample to record qualitative and/or quantitative data.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - assessments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SampleCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SampleCreate'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedSample'
          description: ''
      summary: Creates a sample
  /api/{profile}/sample/{sample}:
    get:
      operationId: sample_retrieve
      description: |2+

        Returns top level information about a sample.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
          description: ''
      summary: Retrieves a sample
  /api/{profile}/sample/{sample}/answers:
    get:
      operationId: sample_answers_retrieve_index
      description: |2+

        The list returned contains at least one measurement for each question
        in the campaign. If there are no measurement yet on a question, ``measured``
        will be null.

        There might be more than one measurement per question as long as there are
        no duplicated ``unit`` per question. For example, to the question
        ``adjust-air-fuel-ratio``, there could be a measurement with unit
        ``assessment`` (Mostly Yes/ Yes / No / Mostly No) and a measurement with
        unit ``freetext`` (i.e. a comment).

        The {sample} must belong to {organization}.

        {path} can be used to filter the tree of questions by a prefix.

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleAnswerList'
          description: ''
      summary: Lists answers
  /api/{profile}/sample/{sample}/answers/{path}:
    get:
      operationId: sample_answers_list
      description: |2+

        The list returned contains at least one measurement for each question
        in the campaign. If there are no measurement yet on a question, ``measured``
        will be null.

        There might be more than one measurement per question as long as there are
        no duplicated ``unit`` per question. For example, to the question
        ``adjust-air-fuel-ratio``, there could be a measurement with unit
        ``assessment`` (Mostly Yes/ Yes / No / Mostly No) and a measurement with
        unit ``freetext`` (i.e. a comment).

        The {sample} must belong to {organization}.

        {path} can be used to filter the tree of questions by a prefix.

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleAnswerList'
          description: ''
      summary: Lists answers for a subset of questions
    post:
      operationId: sample_answers_create
      description: |2+

        This API end-point attaches a measurement (``measured`` field)
        in ``unit`` (meters, kilograms, etc.) to a question (also called metric)
        named {path} as part of a {sample}.

        If a measurement with that ``unit`` already exists for the couple
        ({path}, {sample}), the previous measurement is replaced, otherwise it
        is added.

        If ``unit`` is not specified, the default unit for the question is used.

        The {sample} must belong to {organization} and be updatable.

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Answer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Answer'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
      summary: Updates an answer
  /api/{profile}/sample/{sample}/benchmarks:
    get:
      operationId: sample_benchmarks_index
      description: |2+

        Returns a list of graphs with anonymized performance of peers
        for paths marked as visible (see ::ref::`api_score`).

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExtendedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against all peers
  /api/{profile}/sample/{sample}/benchmarks/{path}:
    get:
      operationId: sample_benchmarks_list
      description: |2+

        Returns a list of graphs with anonymized performance of peers
        for paths marked as visible (see ::ref::`api_score`).

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - benchmarks
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExtendedSampleBenchmarksList'
          description: ''
      summary: Benchmarks against all peers for a subset of questions
  /api/{profile}/sample/{sample}/candidates:
    get:
      operationId: sample_candidates_index
      description: |2+

        The list returned contains at least one answer for each question
        in the campaign. If there are no answer yet on a question, ``measured``
        will be null.

        There might be more than one answer per question as long as there are
        no duplicated ``unit`` per question. For example, to the question
        ``adjust-air-fuel-ratio``, there could be an answer with unit
        ``assessment`` (Mostly Yes/ Yes / No / Mostly No) and an answer with
        unit ``freetext`` (i.e. a comment).

        The ``sample`` must belong to ``organization``.

        ``path`` can be used to filter the tree of questions by a prefix.

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleAnswerList'
          description: ''
      summary: Lists candidate answers
    post:
      operationId: sample_candidates_create_index
      description: |2+

        The list returned contains at least one answer for each question
        in the campaign. If there are no answer yet on a question, ``measured``
        will be null.

        There might be more than one answer per question as long as there are
        no duplicated ``unit`` per question. For example, to the question
        ``adjust-air-fuel-ratio``, there could be an answer with unit
        ``assessment`` (Mostly Yes/ Yes / No / Mostly No) and an answer with
        unit ``freetext`` (i.e. a comment).

        The ``sample`` must belong to ``organization``.

        ``path`` can be used to filter the tree of questions by a prefix.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleAnswerList'
          description: ''
      summary: Uses candidate answers for a subset of questions
  /api/{profile}/sample/{sample}/candidates/{path}:
    get:
      operationId: sample_candidates_list
      description: |2+

        The list returned contains at least one answer for each question
        in the campaign. If there are no answer yet on a question, ``measured``
        will be null.

        There might be more than one answer per question as long as there are
        no duplicated ``unit`` per question. For example, to the question
        ``adjust-air-fuel-ratio``, there could be an answer with unit
        ``assessment`` (Mostly Yes/ Yes / No / Mostly No) and an answer with
        unit ``freetext`` (i.e. a comment).

        The ``sample`` must belong to ``organization``.

        ``path`` can be used to filter the tree of questions by a prefix.

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleAnswerList'
          description: ''
      summary: Lists candidate answers for a subset of questions
    post:
      operationId: sample_candidates_create
      description: |2+

        The list returned contains at least one answer for each question
        in the campaign. If there are no answer yet on a question, ``measured``
        will be null.

        There might be more than one answer per question as long as there are
        no duplicated ``unit`` per question. For example, to the question
        ``adjust-air-fuel-ratio``, there could be an answer with unit
        ``assessment`` (Mostly Yes/ Yes / No / Mostly No) and an answer with
        unit ``freetext`` (i.e. a comment).

        The ``sample`` must belong to ``organization``.

        ``path`` can be used to filter the tree of questions by a prefix.

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleAnswerList'
          description: ''
      summary: Uses candidate answers
  /api/{profile}/sample/{sample}/content:
    get:
      operationId: sample_content_index
      description: |2+

        The list returned contains at least one measurement for each question
        in the campaign. If there are no measurement yet on a question, ``measured``
        will be null.

        There might be more than one measurement per question as long as there are
        no duplicated ``unit`` per question. For example, to the question
        ``adjust-air-fuel-ratio``, there could be a measurement with unit
        ``assessment`` (Mostly Yes/ Yes / No / Mostly No) and a measurement with
        unit ``freetext`` (i.e. a comment).

        The {sample} must belong to {organization}.

        {path} can be used to filter the tree of questions by a prefix.

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAssessmentNodeList'
          description: ''
      summary: Formats answers
  /api/{profile}/sample/{sample}/content/{path}:
    get:
      operationId: sample_content_list
      description: |2+

        The list returned contains at least one measurement for each question
        in the campaign. If there are no measurement yet on a question, ``measured``
        will be null.

        There might be more than one measurement per question as long as there are
        no duplicated ``unit`` per question. For example, to the question
        ``adjust-air-fuel-ratio``, there could be a measurement with unit
        ``assessment`` (Mostly Yes/ Yes / No / Mostly No) and a measurement with
        unit ``freetext`` (i.e. a comment).

        The {sample} must belong to {organization}.

        {path} can be used to filter the tree of questions by a prefix.

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAssessmentNodeList'
          description: ''
      summary: Formats answers matching prefix
  /api/{profile}/sample/{sample}/freeze:
    post:
      operationId: sample_freeze_create_index
      description: |2+

        A frozen sample cannot be edited to add and/or update answers.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sample'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sample'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Sample'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
          description: ''
      summary: Freezes answers
  /api/{profile}/sample/{sample}/freeze/{path}:
    post:
      operationId: sample_freeze_create
      description: |2+

        A frozen sample cannot be edited to add and/or update answers.

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sample'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sample'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Sample'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
          description: ''
      summary: Freezes answers matching prefix
  /api/{profile}/sample/{sample}/reset:
    post:
      operationId: sample_reset_create_index
      description: |2+

        Clears all answers for ``{sample}``.

        ``{sample}`` must belong to ``{profile}`` otherwise no action
        is taken and an error is returned.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
          description: ''
      summary: Clears answers
  /api/{profile}/sample/{sample}/reset/{path}:
    post:
      operationId: sample_reset_create
      description: |2+

        Clears answers for ``{sample}`` for which ``{path}`` is a prefix
        of the question's path.

        ``{sample}`` must belong to ``{profile}`` otherwise no action
        is taken and an error is returned.

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
          description: ''
      summary: Clears answers for a subset of questions
  /api/{profile}/sample/{sample}/respondents:
    get:
      operationId: sample_respondents_index
      description: |2+

        The list returned contains the information about the users who answered
        at least one question.

        The {sample} must belong to {organization}.

        {path} can be used to filter the tree of questions by a prefix.

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
      summary: Lists respondents
  /api/{profile}/sample/{sample}/respondents/{path}:
    get:
      operationId: sample_respondents_list
      description: |2+

        The list returned contains the information about the users who answered
        at least one question.

        The {sample} must belong to {organization}.

        {path} can be used to filter the tree of questions by a prefix.

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sample
        schema:
          type: string
        required: true
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
      summary: Lists respondents for a subset of questions
  /api/attendance/{profile}/{sequence}/{rank}/{user}:
    get:
      operationId: attendance_retrieve
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: rank
        schema:
          type: integer
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      - in: path
        name: user
        schema:
          type: string
        required: true
      tags:
      - progress
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumeratedProgress'
          description: ''
      summary: Retrieves attendance to live event
    post:
      operationId: attendance_create
      description: |2+

        Indicates that a user attended a live event, hence fullfilling
        the requirements for the element of the sequence.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: rank
        schema:
          type: integer
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      - in: path
        name: user
        schema:
          type: string
        required: true
      tags:
      - live-events
      - editors
      - attendance
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumeratedProgress'
          description: ''
      summary: Marks a user's attendance to a live event
  /api/attendance/{profile}/{sequence}/{user}:
    delete:
      operationId: attendance_destroy
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      - in: path
        name: user
        schema:
          type: string
        required: true
      tags:
      - progress
      - editors
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Resets a user's progress on a sequence
  /api/content:
    get:
      operationId: content_index
      description: |2+

      parameters:
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedContentElementList'
          description: ''
      summary: Lists tree of page elements
  /api/content/{path}:
    get:
      operationId: content_list
      description: |2+

      parameters:
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedContentElementList'
          description: ''
      summary: Lists tree of page elements matching prefix
  /api/content/{user}/newsfeed:
    get:
      operationId: content_newsfeed_list
      description: |2+

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: user
        schema:
          type: string
        required: true
      tags:
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPageElementUpdateList'
          description: ''
      summary: Retrieves relevant news for a user
  /api/content/campaigns/{campaign}:
    get:
      operationId: content_campaign_index
      description: |2+

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedContentNodeList'
          description: ''
      summary: List questions in a campaign
  /api/content/comments/{path}:
    get:
      operationId: content_comments_list
      description: |2+

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: path
        schema:
          type: string
        required: true
      tags:
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentList'
          description: ''
      summary: Lists comments on a page element
    post:
      operationId: content_comments_create
      description: |2+

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      tags:
      - content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
      summary: Comments on a page element
  /api/content/detail/{path}:
    get:
      operationId: content_detail_retrieve
      description: |2+

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      tags:
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageElement'
          description: ''
      summary: Retrieves a page element
  /api/content/downvote/{path}:
    post:
      operationId: content_downvote_create
      description: |2+

        The authenticated user making the request indicates the practice is
        not worth implementing.

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      tags:
      - content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageElement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PageElement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PageElement'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageElement'
          description: ''
      summary: Downvotes a page element
  /api/content/follow/{path}:
    post:
      operationId: content_follow_create
      description: |2+

        The authenticated user making the request will receive notification
        whenever someone comments on the practice.

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      tags:
      - content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageElement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PageElement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PageElement'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageElement'
          description: ''
      summary: Follows a page element
  /api/content/search:
    get:
      operationId: content_search
      description: |2+

        Returns a list of page elements whose title matches a search criteria.

      parameters:
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPageElementList'
          description: ''
      summary: Searches page elements
  /api/content/sequences:
    get:
      operationId: content_sequences_list
      description: |2+

        Returns a list of `page_size` sequences available to the request user.

        The queryset can be further refined to match a search filter (``q``)
        and sorted on specific fields (``o``).

      parameters:
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSequenceList'
          description: ''
      summary: Lists sequences of page elements
  /api/content/unfollow/{path}:
    post:
      operationId: content_unfollow_create
      description: |2+

        The authenticated user making the request will stop receiving notification
        whenever someone comments on the practice.

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      tags:
      - content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageElement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PageElement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PageElement'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageElement'
          description: ''
      summary: Unfollows a page element
  /api/content/upvote/{path}:
    post:
      operationId: content_upvote_create
      description: |2+

        The authenticated user making the request indicates the practice is
        considered worthwhile implementing.

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      tags:
      - content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageElement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PageElement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PageElement'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageElement'
          description: ''
      summary: Upvotes a page element
  /api/editables/{profile}/campaigns/{campaign}:
    get:
      operationId: editables_campaigns_list
      description: |2+

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedContentNodeList'
          description: ''
      summary: List questions in a campaign
    post:
      operationId: editables_campaigns_create_index
      description: |2+

        Updates the title, text and, if applicable, the metrics associated
        associated to the content element referenced by *path*.

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentElement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateContentElement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateContentElement'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContentElement'
          description: ''
      summary: Creates a practice
  /api/editables/{profile}/campaigns/{campaign}/{path}:
    get:
      operationId: editables_campaigns_retrieve
      description: |2+

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDetail'
          description: ''
      summary: Retrieves a question
    post:
      operationId: editables_campaigns_create
      description: |2+

        Creates a new question under prefix *path*.

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionCreate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionCreate'
          description: ''
      summary: Creates a question
    put:
      operationId: editables_campaigns_update
      description: |2+

        Updates the title, text and, if applicable, the metrics associated
        associated to the content element referenced by *path*.

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionUpdate'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionUpdate'
          description: ''
      summary: Updates a question
    patch:
      operationId: editables_campaigns_partial_update
      description: |2+

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestionDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedQuestionDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestionDetail'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDetail'
          description: ''
      summary: Retrieves a question
    delete:
      operationId: editables_campaigns_destroy
      description: |2+

        Deletes all questions under prefix *path*.

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Deletes questions
  /api/editables/{profile}/campaigns/{campaign}/segments:
    get:
      operationId: editables_campaigns_segments_list
      description: |2+

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedContentNodeList'
          description: ''
      summary: List segments in a campaign
    post:
      operationId: editables_campaigns_segments_create
      description: |2+

      parameters:
      - in: path
        name: campaign
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeElementCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NodeElementCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NodeElementCreate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeElementCreate'
          description: ''
      summary: Creates a segment in a campaign
  /api/editables/{profile}/content:
    get:
      operationId: editables_content_list
      description: |2+

        This API endpoint lists page elements that are owned and thus editable
        by an account.

      parameters:
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPageElementList'
          description: ''
      summary: List editable page elements
    post:
      operationId: editables_content_index
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeElementCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NodeElementCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NodeElementCreate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeElementCreate'
          description: ''
      summary: Creates a page element
  /api/editables/{profile}/content/{path}:
    get:
      operationId: editables_content_retrieve
      description: |2+

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageElement'
          description: ''
      summary: Retrieves an editable page element
    post:
      operationId: editables_content_create
      description: |2+

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageElement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PageElement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PageElement'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageElement'
          description: ''
      summary: Creates a page element under a prefix
    put:
      operationId: editables_content_update
      description: |2+

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageElement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PageElement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PageElement'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageElement'
          description: ''
      summary: Updates a page element
    patch:
      operationId: editables_content_partial_update
      description: |2+

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPageElement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPageElement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPageElement'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageElement'
          description: ''
      summary: Retrieves an editable page element
    delete:
      operationId: editables_content_destroy
      description: |2+

      parameters:
      - in: path
        name: path
        schema:
          type: string
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Deletes a page element
  /api/editables/{profile}/content/alias/{path}:
    post:
      operationId: editables_content_alias_create
      description: ''
      parameters:
      - in: path
        name: path
        schema:
          type: string
          pattern: ^([a-zA-Z0-9\-]+/)*[a-zA-Z0-9\-]*$
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EdgeCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EdgeCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgeCreate'
          description: ''
      summary: Aliases the content of an editable node
  /api/editables/{profile}/content/attach/{path}:
    post:
      operationId: editables_content_attach_create
      description: |2

        Moves a PageElement from one attachement to another.
      parameters:
      - in: path
        name: path
        schema:
          type: string
          pattern: ^([a-zA-Z0-9\-]+/)*[a-zA-Z0-9\-]*$
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EdgeCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EdgeCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgeCreate'
          description: ''
      summary: Moves an editable node
  /api/editables/{profile}/content/mirror/{path}:
    post:
      operationId: editables_content_mirror_create
      description: |2

        Mirrors the content of a PageElement and attach the mirror
        under another node.
      parameters:
      - in: path
        name: path
        schema:
          type: string
          pattern: ^([a-zA-Z0-9\-]+/)*[a-zA-Z0-9\-]*$
        required: true
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EdgeCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EdgeCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgeCreate'
          description: ''
      summary: Mirrors the content of an editable node
  /api/editables/{profile}/sequences:
    get:
      operationId: editables_sequences_list
      description: |2+

        Returns a list of `page_size` sequences editable by profile.

        The queryset can be further refined to match a search filter (``q``)
        and sorted on specific fields (``o``).

      parameters:
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSequenceList'
          description: ''
      summary: Lists editable sequences
    post:
      operationId: editables_sequences_create
      description: |2+

        Creates a new sequence editable by profile.

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SequenceCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SequenceCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SequenceCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SequenceCreate'
          description: ''
      summary: Creates a sequence of page elements
  /api/editables/{profile}/sequences/{sequence}:
    get:
      operationId: editables_sequences_retrieve
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sequence'
          description: ''
      summary: Retrieves a sequence
    put:
      operationId: editables_sequences_update
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SequenceUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SequenceUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SequenceUpdate'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SequenceUpdate'
          description: ''
      summary: Updates a sequence
    patch:
      operationId: editables_sequences_partial_update
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSequence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSequence'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSequence'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sequence'
          description: ''
      summary: Retrieves a sequence
    delete:
      operationId: editables_sequences_destroy
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Deletes a sequence
  /api/editables/{profile}/sequences/{sequence}/elements:
    get:
      operationId: editables_sequences_elements_list
      description: |2+

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEnumeratedElementList'
          description: ''
      summary: Lists page elements in a sequence
    post:
      operationId: editables_sequences_elements_create
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      tags:
      - editors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumeratedElement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EnumeratedElement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EnumeratedElement'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumeratedElement'
          description: ''
      summary: Inserts a page element in a sequence
  /api/editables/{profile}/sequences/{sequence}/elements/{rank}:
    delete:
      operationId: editables_sequences_elements_destroy
      description: |2+

      parameters:
      - in: path
        name: profile
        schema:
          type: string
        required: true
      - in: path
        name: rank
        schema:
          type: integer
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      tags:
      - editors
      security:
      - {}
      responses:
        '204':
          description: No response body
      summary: Removes a page element from a sequence
  /api/progress/{user}/{sequence}:
    get:
      operationId: progress_list
      description: |2+

      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      - in: path
        name: user
        schema:
          type: string
        required: true
      tags:
      - progress
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEnumeratedProgressList'
          description: ''
      summary: Lists progress for a user on a sequence
  /api/progress/{user}/{sequence}/{rank}:
    get:
      operationId: progress_retrieve
      description: |2+

      parameters:
      - in: path
        name: rank
        schema:
          type: integer
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      - in: path
        name: user
        schema:
          type: string
        required: true
      tags:
      - progress
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumeratedProgress'
          description: ''
      summary: Retrieves viewing time for an element
    post:
      operationId: progress_create
      description: |2+

      parameters:
      - in: path
        name: rank
        schema:
          type: integer
        required: true
      - in: path
        name: sequence
        schema:
          type: string
        required: true
      - in: path
        name: user
        schema:
          type: string
        required: true
      tags:
      - progress
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumeratedProgress'
          description: ''
      summary: Updates viewing time for an element
  /api/respondents:
    get:
      operationId: respondents_list
      description: |2+

        Returns `page_size` profiles with a frozen response

      parameters:
      - name: o
        required: false
        in: query
        description: sort by printable_name, created_at. If a field is preceded by
          a minus sign ('-'), the order will be reversed. Multiple 'o' parameters
          can be specified to produce a stable result.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: value to search for in the fields specified by q_f
        schema:
          type: string
      - name: q_f
        required: false
        in: query
        description: 'restrict searches to one or more fields in: full_name, email.
          searches all fields when unspecified.'
        schema:
          type: string
      tags:
      - assessments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRespondentAccountList'
          description: ''
      summary: Lists profiles with a frozen response
  /api/units:
    get:
      operationId: units_index
      description: |2


        This API end-point lists all the units of measurement available
        to record datapoints.

        Alongside the usual metric units (meters, kilogram, etc.) and imperial
        units (inch, pounds, etc.), there could be units with a rank system
        (natural integers), or an enumerated system (finite set of values with
        no order). A special unit is used to represent free form text.
      parameters:
      - name: eq
        required: false
        in: query
        description: units that can be used intercheably with this one
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: value to search for in the fields specified by q_f
        schema:
          type: string
      - name: q_f
        required: false
        in: query
        description: 'restrict searches to one or more fields in: slug. searches all
          fields when unspecified.'
        schema:
          type: string
      tags:
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUnitList'
          description: ''
      summary: Lists units
  /api/units/{unit}:
    get:
      operationId: units_retrieve
      description: |2+

        Retrieves the details of a ``Unit``.

      parameters:
      - in: path
        name: unit
        schema:
          type: string
        required: true
      tags:
      - content
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
      summary: Retrieves a unit
components:
  schemas:
    Answer:
      type: object
      description: Serializer of ``Answer`` when used individually.
      properties:
        unit:
          type: string
          description: Unit the measured field is in
          nullable: true
        measured:
          type: string
          nullable: true
          description: measurement in unit
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time of creation (in ISO format)
        collected_by:
          type: string
          description: User that collected the answer
          readOnly: true
      required:
      - collected_by
      - created_at
      - measured
    AssessmentNode:
      type: object
      description: One practice retrieved through the assess content API
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        path:
          type: string
          readOnly: true
          nullable: true
          description: path from the root of content tree
        indent:
          type: string
          readOnly: true
          nullable: true
          description: level in the content tree
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        title:
          type: string
          description: Title of the page element
          maxLength: 1024
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
        default_unit:
          type: string
          readOnly: true
        score_weight:
          type: string
          readOnly: true
        rank:
          type: string
          readOnly: true
        required:
          type: string
          readOnly: true
        frozen:
          type: string
          readOnly: true
        url:
          type: string
        segments:
          type: array
          items:
            type: string
        ui_hint:
          type: string
          readOnly: true
        text:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        planned:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        normalized_score:
          type: string
          readOnly: true
        opportunity:
          type: string
          readOnly: true
      required:
      - account
      - default_unit
      - extra
      - frozen
      - indent
      - normalized_score
      - opportunity
      - path
      - rank
      - required
      - score_weight
      - slug
      - ui_hint
    Asset:
      type: object
      properties:
        location:
          type: string
          description: URL where the asset content is stored.
        updated_at:
          type: string
          format: date-time
          description: Last date/time the asset content was updated.
      required:
      - location
    Campaign:
      type: object
      description: Short description of the campaign.
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in a URL
          pattern: ^[-a-zA-Z0-9_]+$
        account:
          type: string
          description: Account this sample belongs to.
        title:
          type: string
          description: Title of the campaign as displayed in user interfaces
          maxLength: 150
        description:
          type: string
          nullable: true
          description: Long form description displayed to users responding to the
            campaign
        created_at:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
          description: Whether the campaign is available or not
      required:
      - account
      - created_at
      - slug
      - title
    CampaignCreate:
      type: object
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in a URL
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          description: Title of the campaign as displayed in user interfaces
          maxLength: 150
        description:
          type: string
          nullable: true
          description: Long form description displayed to users responding to the
            campaign
        quizz_mode:
          type: boolean
          description: If checked, correct answser are required
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionCreate'
      required:
      - slug
      - title
    CampaignDetail:
      type: object
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in a URL
          pattern: ^[-a-zA-Z0-9_]+$
        account:
          type: string
          description: Account this sample belongs to.
        title:
          type: string
          description: Title of the campaign as displayed in user interfaces
          maxLength: 150
        description:
          type: string
          nullable: true
          description: Long form description displayed to users responding to the
            campaign
        active:
          type: boolean
          description: Whether the campaign is available or not
        quizz_mode:
          type: boolean
          description: If checked, correct answser are required
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
      required:
      - account
      - questions
      - slug
      - title
    Choice:
      type: object
      properties:
        text:
          type: string
          readOnly: true
          description: short name for the enumerated value (as used in source code)
        descr:
          type: string
          readOnly: true
          description: long form description of the enumerated value (for help tooltips)
      required:
      - descr
      - text
    Cohort:
      type: object
      properties:
        slug:
          type: string
          description: Unique identifier for the profile
        full_name:
          type: string
          description: Human readable name for the profile
        path:
          type: string
          description: Path for the question used to filter profiles
        measured:
          type: string
          description: Answer to the question used to filter profiles
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
    CohortAdd:
      type: object
      properties:
        slug:
          type: string
          description: Unique identifier for the profile
        full_name:
          type: string
          description: Human readable name for the profile
        path:
          type: string
          description: Path for the question used to filter profiles
        measured:
          type: string
          description: Answer to the question used to filter profiles
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
    Comment:
      type: object
      description: Serializes a Comment.
      properties:
        text:
          type: string
          description: Long description of the page element
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time the comment was submitted (in ISO format)
        user:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
      required:
      - created_at
      - user
    CompareQuestion:
      type: object
      description: Serializer for a question in the `results` field of a Compare API
        call.
      properties:
        path:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL
        title:
          type: string
          description: Short description
        default_unit:
          $ref: '#/components/schemas/Unit'
        ui_hint:
          allOf:
          - $ref: '#/components/schemas/UiHintEnum'
          description: Hint for the user interface on how to present the input field
        values:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Answer'
      required:
      - default_unit
      - path
    ContentElement:
      type: object
      description: Serializes a PageElement extended with intrinsic values
      properties:
        path:
          type: string
          readOnly: true
          description: path from the root of content tree
        slug:
          type: string
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        title:
          type: string
          description: Title of the page element
          maxLength: 1024
        content_format:
          allOf:
          - $ref: '#/components/schemas/ContentFormatEnum'
          description: Format of the content, HTML or MD
        text:
          type: string
          description: Long description of the page element
        reading_time:
          type: string
          nullable: true
          description: Reading time of the material (in hh:mm:ss)
        lang:
          type: string
          description: Language the material is written in
          maxLength: 8
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
        nb_upvotes:
          type: integer
          description: Number of times the content has been upvoted
        nb_followers:
          type: integer
          description: Number of followers notified when content is updated
        upvote:
          type: string
          readOnly: true
          nullable: true
          description: Set to true when the request user upvoted the content
        follow:
          type: string
          readOnly: true
          nullable: true
          description: Set to true when the request user follows the content
        count:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/ContentNode'
        html_formatted:
          type: string
          readOnly: true
      required:
      - account
      - extra
      - follow
      - html_formatted
      - path
      - upvote
    ContentFormatEnum:
      enum:
      - HTML
      - MD
      type: string
    ContentNode:
      type: object
      description: Serializes a PageElement as a node in a content tree
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        path:
          type: string
          readOnly: true
          nullable: true
          description: path from the root of content tree
        indent:
          type: string
          readOnly: true
          nullable: true
          description: level in the content tree
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        title:
          type: string
          description: Title of the page element
          maxLength: 1024
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
        default_unit:
          type: string
          readOnly: true
        score_weight:
          type: string
          readOnly: true
        rank:
          type: string
          readOnly: true
        required:
          type: string
          readOnly: true
        frozen:
          type: string
          readOnly: true
        url:
          type: string
        segments:
          type: array
          items:
            type: string
      required:
      - account
      - default_unit
      - extra
      - frozen
      - indent
      - path
      - rank
      - required
      - score_weight
      - slug
    CreateContentElement:
      type: object
      description: Serializes a PageElement as a node in a content tree
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        path:
          type: string
          readOnly: true
          nullable: true
          description: path from the root of content tree
        indent:
          type: string
          readOnly: true
          nullable: true
          description: level in the content tree
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        title:
          type: string
          description: Title of the page element
          maxLength: 1024
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
        default_unit:
          type: string
          readOnly: true
        score_weight:
          type: string
          readOnly: true
        rank:
          type: string
          readOnly: true
        required:
          type: string
          readOnly: true
        frozen:
          type: string
          readOnly: true
        url:
          type: string
        segments:
          type: array
          items:
            type: string
        parents:
          type: array
          items:
            $ref: '#/components/schemas/CreateParent'
      required:
      - account
      - default_unit
      - extra
      - frozen
      - indent
      - parents
      - path
      - rank
      - required
      - score_weight
      - slug
    CreateParent:
      type: object
      properties:
        slug:
          type: string
        title:
          type: string
    Datapoint:
      type: object
      description: Serializer of ``Answer`` when used to retrieve data points.
      properties:
        unit:
          type: string
          description: Unit the measured field is in
          nullable: true
        measured:
          type: string
          nullable: true
          description: measurement in unit
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time of creation (in ISO format)
        collected_by:
          type: string
          description: User that collected the answer
          readOnly: true
        account:
          type: string
          readOnly: true
      required:
      - account
      - collected_by
      - created_at
      - measured
    EdgeCreate:
      type: object
      description: |-
        Create a new edge between two ``PageElement``.

        The path specified in the URL will be aliased, mirrored or moved
        under *source*.
        When *rank* is specified, the resulting index of the aliased/mirrored/moved
        element in its parent list will be *rank*.

        The state in the UI is particularly complex. We use the *external_key*
        to log incorrect calls from the Javascript code.
      properties:
        source:
          type: string
        rank:
          type: integer
        external_key:
          type: string
      required:
      - source
    EditableFilter:
      type: object
      properties:
        slug:
          type: string
          description: Unique identifier for the group that can be used in a URL
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          description: Title for the group
          maxLength: 255
        account:
          type: string
          readOnly: true
          description: Account the group belongs to
        extra:
          type: string
          nullable: true
          description: Extra meta data (can be stringify JSON)
      required:
      - account
      - slug
      - title
    EditableFilterAnswer:
      type: object
      description: Serializer of ``Answer`` when used to create data points.
      properties:
        unit:
          type: string
          description: Unit the measured field is in
        measured:
          type: string
          nullable: true
          description: measurement in unit
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time of creation (in ISO format)
        collected_by:
          type: string
          description: User that collected the answer
          readOnly: true
        slug:
          type: string
          description: Account this sample belongs to.
      required:
      - collected_by
      - created_at
      - measured
      - slug
      - unit
    EditableFilterCreate:
      type: object
      properties:
        slug:
          type: string
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          description: Title for the group
          maxLength: 255
        account:
          type: string
          readOnly: true
          description: Account the group belongs to
        extra:
          type: string
          nullable: true
          description: Extra meta data (can be stringify JSON)
      required:
      - account
      - title
    EditableFilterUpdate:
      type: object
      properties:
        slug:
          type: string
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          description: Title for the group
          maxLength: 255
        account:
          type: string
          readOnly: true
          description: Account the group belongs to
        extra:
          type: string
          nullable: true
          description: Extra meta data (can be stringify JSON)
      required:
      - account
      - title
    EditableFilterValuesCreate:
      type: object
      properties:
        baseline_at:
          type: string
        created_at:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/EditableFilterAnswer'
      required:
      - created_at
      - items
    Engagement:
      type: object
      properties:
        slug:
          type: string
          readOnly: true
        printable_name:
          type: string
          readOnly: true
          description: Name that can be safely used for display in HTML pages
        picture:
          type: string
          readOnly: true
          description: URL location of the profile picture
        extra:
          type: string
          readOnly: true
          description: Extra meta data (can be stringify JSON)
        rank:
          type: string
          readOnly: true
          description: rank in filter
        sample:
          type: string
          pattern: ^[-a-zA-Z0-9_]+$
        reporting_status:
          allOf:
          - $ref: '#/components/schemas/ReportingStatusEnum'
          description: current reporting status
        last_activity_at:
          type: string
          format: date-time
          nullable: true
          description: Most recent time an assessment was updated
        last_reminder_at:
          type: string
          format: date-time
          nullable: true
          description: Most recent time a reminder was sent
        requested_at:
          type: string
          format: date-time
          nullable: true
          description: Datetime at which the scorecard was requested
        normalized_score:
          type: integer
        score_url:
          type: string
          readOnly: true
          description: link to the scorecard
        api_remove:
          type: string
          readOnly: true
      required:
      - api_remove
      - extra
      - picture
      - printable_name
      - rank
      - reporting_status
      - score_url
      - slug
    EnumeratedElement:
      type: object
      description: Serializes an EnumeratedElement
      properties:
        content:
          type: string
          description: Page element the enumerated element is for
        rank:
          type: integer
          description: Used to order elements when presenting a sequence
        min_viewing_duration:
          type: string
          description: Minimum viewing time of the material (in hh:mm:ss)
        certificate:
          type: boolean
          writeOnly: true
          default: false
          description: Field to indicate if the PageElement being added to the Sequence
            is a Certificate
      required:
      - content
      - rank
    EnumeratedProgress:
      type: object
      description: Serializes a EnumeratedProgress object
      properties:
        content:
          type: string
          description: Page element the enumerated element is for
        rank:
          type: integer
          readOnly: true
          description: Used to order elements when presenting a sequence
        min_viewing_duration:
          type: string
          readOnly: true
          description: Minimum viewing time of the material (in hh:mm:ss)
        certificate:
          type: boolean
          writeOnly: true
          default: false
          description: Field to indicate if the PageElement being added to the Sequence
            is a Certificate
        viewing_duration:
          type: string
          description: Time spent by the user on the material (in hh:mm:ss)
      required:
      - content
      - min_viewing_duration
      - rank
      - viewing_duration
    ExpectedBehaviorEnum:
      enum:
      - share
      - create
      - update
      type: string
    ExtendedSample:
      type: object
      properties:
        campaign:
          allOf:
          - $ref: '#/components/schemas/Campaign'
          readOnly: true
          nullable: true
          description: Campaign this sample is part of
        slug:
          type: string
          readOnly: true
          description: Unique identifier for the sample. It can be used in a URL.
          pattern: ^[-a-zA-Z0-9_]+$
        account:
          type: string
          readOnly: true
          description: Account this sample belongs to
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time of creation (in ISO format)
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time of last update (in ISO format)
        is_frozen:
          type: boolean
          readOnly: true
          description: When True, answers to that sample cannot be updated.
        location:
          type: string
          format: uri
          readOnly: true
          nullable: true
          description: URL at which the response is visible
        grantees:
          type: array
          items: {}
          description: Profiles with which sample was shared
        verified_status:
          allOf:
          - $ref: '#/components/schemas/VerifiedStatusEnum'
          description: verification status
      required:
      - account
      - campaign
      - created_at
      - is_frozen
      - location
      - slug
      - updated_at
    ExtendedSampleBenchmarks:
      type: object
      description: Serializes a PageElement as a node in a content tree
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        path:
          type: string
          readOnly: true
          nullable: true
          description: path from the root of content tree
        indent:
          type: string
          readOnly: true
          nullable: true
          description: level in the content tree
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        title:
          type: string
          description: Title of the page element
          maxLength: 1024
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
        default_unit:
          type: string
          readOnly: true
        score_weight:
          type: string
          readOnly: true
        rank:
          type: string
          readOnly: true
        required:
          type: string
          readOnly: true
        frozen:
          type: string
          readOnly: true
        url:
          type: string
        segments:
          type: array
          items:
            type: string
        avg_normalized_score:
          type: integer
        highest_normalized_score:
          type: integer
        nb_respondents:
          type: integer
        benchmarks:
          type: array
          items:
            $ref: '#/components/schemas/Table'
      required:
      - account
      - default_unit
      - extra
      - frozen
      - indent
      - path
      - rank
      - required
      - score_weight
      - slug
    Invitee:
      type: object
      properties:
        slug:
          type: string
          pattern: ^[-a-zA-Z0-9_]+$
        full_name:
          type: string
        email:
          type: string
          format: email
        printable_name:
          type: string
          readOnly: true
      required:
      - full_name
      - printable_name
      - slug
    Matrix:
      type: object
      properties:
        slug:
          type: string
        title:
          type: string
          maxLength: 255
        metric:
          $ref: '#/components/schemas/EditableFilter'
        cohorts:
          type: array
          items:
            $ref: '#/components/schemas/EditableFilter'
        cut:
          $ref: '#/components/schemas/EditableFilter'
      required:
      - cohorts
      - title
    Metrics:
      type: object
      properties:
        scale:
          type: number
          format: double
          description: 'The scale of the number reported in the tables (ex: 1000 when
            numbers are reported in thousands)'
        unit:
          type: string
          description: Unit the measured field is in
          nullable: true
        title:
          type: string
          description: Title for the table
        results:
          type: array
          items:
            $ref: '#/components/schemas/Table'
          description: Data series
      required:
      - results
      - title
    NodeElement:
      type: object
      description: Serializes a PageElement as a node in a content tree
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        path:
          type: string
          readOnly: true
          nullable: true
          description: path from the root of content tree
        indent:
          type: string
          readOnly: true
          nullable: true
          description: level in the content tree
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        title:
          type: string
          description: Title of the page element
          maxLength: 1024
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
      required:
      - account
      - extra
      - indent
      - path
      - slug
    NodeElementCreate:
      type: object
      description: Serializer to create a PageElement as a node in a content tree
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        path:
          type: string
          readOnly: true
          nullable: true
          description: path from the root of content tree
        indent:
          type: string
          readOnly: true
          nullable: true
          description: level in the content tree
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        title:
          type: string
          description: Title of the page element
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
      required:
      - account
      - extra
      - indent
      - path
      - slug
      - title
    PageElement:
      type: object
      description: Serializes a PageElement.
      properties:
        path:
          type: string
          readOnly: true
          description: path from the root of content tree
        slug:
          type: string
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        title:
          type: string
          description: Title of the page element
          maxLength: 1024
        content_format:
          allOf:
          - $ref: '#/components/schemas/ContentFormatEnum'
          description: Format of the content, HTML or MD
        text:
          type: string
          description: Long description of the page element
        reading_time:
          type: string
          nullable: true
          description: Reading time of the material (in hh:mm:ss)
        lang:
          type: string
          description: Language the material is written in
          maxLength: 8
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
        nb_upvotes:
          type: integer
          description: Number of times the content has been upvoted
        nb_followers:
          type: integer
          description: Number of followers notified when content is updated
        upvote:
          type: string
          readOnly: true
          nullable: true
          description: Set to true when the request user upvoted the content
        follow:
          type: string
          readOnly: true
          nullable: true
          description: Set to true when the request user follows the content
        count:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/NodeElement'
        html_formatted:
          type: string
          readOnly: true
      required:
      - account
      - extra
      - follow
      - html_formatted
      - path
      - upvote
    PageElementUpdate:
      type: object
      description: Serializer for news updates
      properties:
        path:
          type: string
          readOnly: true
          description: path from the root of content tree
        slug:
          type: string
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        title:
          type: string
          description: Title of the page element
          maxLength: 1024
        content_format:
          allOf:
          - $ref: '#/components/schemas/ContentFormatEnum'
          description: Format of the content, HTML or MD
        text:
          type: string
          description: Long description of the page element
        reading_time:
          type: string
          nullable: true
          description: Reading time of the material (in hh:mm:ss)
        lang:
          type: string
          description: Language the material is written in
          maxLength: 8
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
        nb_upvotes:
          type: integer
          description: Number of times the content has been upvoted
        nb_followers:
          type: integer
          description: Number of followers notified when content is updated
        upvote:
          type: string
          readOnly: true
          nullable: true
          description: Set to true when the request user upvoted the content
        follow:
          type: string
          readOnly: true
          nullable: true
          description: Set to true when the request user follows the content
        count:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/NodeElement'
        html_formatted:
          type: string
          readOnly: true
        text_updated_at:
          type: string
          format: date-time
          description: Datetime of last update on the page element's text
        nb_comments_since_last_read:
          type: integer
          description: Number of comments since last read
        last_read_at:
          type: string
          format: date-time
          readOnly: true
          description: Last time the PageElement was read
        descr:
          type: string
          readOnly: true
      required:
      - account
      - descr
      - extra
      - follow
      - html_formatted
      - last_read_at
      - path
      - upvote
    PaginatedAnswerList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    PaginatedAssessmentNodeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AssessmentNode'
    PaginatedCampaignList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Campaign'
    PaginatedCohortList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Cohort'
    PaginatedCommentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    PaginatedCompareQuestionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CompareQuestion'
    PaginatedContentElementList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ContentElement'
    PaginatedContentNodeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ContentNode'
    PaginatedDatapointList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Datapoint'
    PaginatedEditableFilterList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EditableFilter'
    PaginatedEngagementList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Engagement'
    PaginatedEnumeratedElementList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EnumeratedElement'
    PaginatedEnumeratedProgressList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EnumeratedProgress'
    PaginatedExtendedSampleBenchmarksList:
      type: object
      properties:
        title:
          type: integer
          description: Title for the results table
        scale:
          type: integer
          description: 'The scale of the number reported in the tables (ex: 1000 when
            numbers are reported in thousands)'
        unit:
          type: integer
          description: Unit the measured field is in
        nb_accounts:
          type: integer
          description: Total number of accounts evaluated
        labels:
          type: array
          description: Labels for the x-axis when present
        count:
          type: integer
          description: The number of records
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExtendedSampleBenchmarks'
          description: Items in the queryset
        avg_normalized_score:
          type: integer
          description: Average score for the campaign
        highest_normalized_score:
          type: integer
          description: Highest score for the campaign
    PaginatedExtendedSampleList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExtendedSample'
    PaginatedMatrixList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Matrix'
    PaginatedPageElementList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PageElement'
    PaginatedPageElementUpdateList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PageElementUpdate'
    PaginatedPortfolioOptInList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioOptIn'
    PaginatedPortfolioReceivedList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioReceived'
    PaginatedRespondentAccountList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/RespondentAccount'
    PaginatedSampleAnswerList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SampleAnswer'
    PaginatedSampleBenchmarksList:
      type: object
      properties:
        title:
          type: integer
          description: Title for the results table
        scale:
          type: integer
          description: 'The scale of the number reported in the tables (ex: 1000 when
            numbers are reported in thousands)'
        unit:
          type: integer
          description: Unit the measured field is in
        nb_accounts:
          type: integer
          description: Total number of accounts evaluated
        labels:
          type: array
          description: Labels for the x-axis when present
        count:
          type: integer
          description: The number of records
        results:
          type: array
          items:
            $ref: '#/components/schemas/SampleBenchmarks'
          description: Items in the queryset
    PaginatedSequenceList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Sequence'
    PaginatedUnitList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedCohort:
      type: object
      properties:
        slug:
          type: string
          description: Unique identifier for the profile
        full_name:
          type: string
          description: Human readable name for the profile
        path:
          type: string
          description: Path for the question used to filter profiles
        measured:
          type: string
          description: Answer to the question used to filter profiles
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
    PatchedMatrix:
      type: object
      properties:
        slug:
          type: string
        title:
          type: string
          maxLength: 255
        metric:
          $ref: '#/components/schemas/EditableFilter'
        cohorts:
          type: array
          items:
            $ref: '#/components/schemas/EditableFilter'
        cut:
          $ref: '#/components/schemas/EditableFilter'
    PatchedPageElement:
      type: object
      description: Serializes a PageElement.
      properties:
        path:
          type: string
          readOnly: true
          description: path from the root of content tree
        slug:
          type: string
          description: Unique identifier that can be used in URL paths
          pattern: ^[-a-zA-Z0-9_]+$
        picture:
          type: string
          nullable: true
          description: Picture icon that can be displayed alongside the title
        title:
          type: string
          description: Title of the page element
          maxLength: 1024
        content_format:
          allOf:
          - $ref: '#/components/schemas/ContentFormatEnum'
          description: Format of the content, HTML or MD
        text:
          type: string
          description: Long description of the page element
        reading_time:
          type: string
          nullable: true
          description: Reading time of the material (in hh:mm:ss)
        lang:
          type: string
          description: Language the material is written in
          maxLength: 8
        account:
          type: string
          readOnly: true
          description: Account that can edit the page element
        extra:
          type: string
          readOnly: true
          nullable: true
          description: Extra meta data (can be stringify JSON)
        nb_upvotes:
          type: integer
          description: Number of times the content has been upvoted
        nb_followers:
          type: integer
          description: Number of followers notified when content is updated
        upvote:
          type: string
          readOnly: true
          nullable: true
          description: Set to true when the request user upvoted the content
        follow:
          type: string
          readOnly: true
          nullable: true
          description: Set to true when the request user follows the content
        count:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/NodeElement'
        html_formatted:
          type: string
          readOnly: true
    PatchedPortfolioOptInUpdate:
      type: object
      properties:
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
    PatchedQuestionDetail:
      type: object
      properties:
        title:
          type: string
          description: Title of the question as displayed in user interfaces
        text:
          type: string
          description: Long form description about the question
        default_unit:
          type: string
          description: Default unit for measured field when none is specified
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
        path:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL
    PatchedSequence:
      type: object
      description: Serializes a Sequence object
      properties:
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time the sequence was created (in ISO format)
        slug:
          type: string
          description: Unique identifier that can be used in URL paths
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          description: Title of the sequence
          maxLength: 1024
        account:
          type: string
          readOnly: true
          description: Account that can edit the sequence
        has_certificate:
          type: boolean
          description: True when the sequence ends with a certificate of completion
        extra:
          type: string
          nullable: true
          description: Extra meta data (can be stringify JSON)
    PortfolioGrantCreate:
      type: object
      properties:
        accounts:
          type: array
          items:
            type: string
        campaign:
          type: string
          description: Unique identifier that can be used in a URL
        message:
          type: string
          nullable: true
        ends_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        grantee:
          $ref: '#/components/schemas/Invitee'
      required:
      - ends_at
      - grantee
    PortfolioOptIn:
      type: object
      properties:
        grantee:
          type: string
        account:
          type: string
        campaign:
          allOf:
          - $ref: '#/components/schemas/Campaign'
          nullable: true
          description: Campaign granted/requested
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time at which the grant/request was created
        ends_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        state:
          $ref: '#/components/schemas/StateEnum'
        expected_behavior:
          $ref: '#/components/schemas/ExpectedBehaviorEnum'
        api_accept:
          type: string
          readOnly: true
        api_remove:
          type: string
          readOnly: true
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
      required:
      - account
      - api_accept
      - api_remove
      - campaign
      - created_at
      - ends_at
      - grantee
      - state
    PortfolioOptInUpdate:
      type: object
      properties:
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
    PortfolioReceived:
      type: object
      properties:
        grantee:
          type: string
        account:
          type: string
        campaign:
          allOf:
          - $ref: '#/components/schemas/Campaign'
          nullable: true
          description: Campaign granted/requested
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time at which the grant/request was created
        ends_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        state:
          $ref: '#/components/schemas/StateEnum'
        expected_behavior:
          $ref: '#/components/schemas/ExpectedBehaviorEnum'
        api_accept:
          type: string
          readOnly: true
        api_remove:
          type: string
          readOnly: true
      required:
      - account
      - api_accept
      - api_remove
      - campaign
      - created_at
      - ends_at
      - grantee
      - state
    PortfolioRequestCreate:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Invitee'
        campaign:
          type: string
          description: Unique identifier that can be used in a URL
        message:
          type: string
          nullable: true
        ends_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
      required:
      - accounts
      - ends_at
    Question:
      type: object
      description: Serializer of ``Question`` when used in a list of answers
      properties:
        path:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL
        title:
          type: string
          description: Short description
        default_unit:
          $ref: '#/components/schemas/Unit'
        ui_hint:
          allOf:
          - $ref: '#/components/schemas/UiHintEnum'
          description: Hint for the user interface on how to present the input field
      required:
      - default_unit
      - path
    QuestionCreate:
      type: object
      properties:
        title:
          type: string
          description: Title of the question as displayed in user interfaces
        text:
          type: string
          description: Long form description about the question
        default_unit:
          type: string
          description: Default unit for measured field when none is specified
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
        path:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL
      required:
      - path
      - title
    QuestionDetail:
      type: object
      properties:
        title:
          type: string
          description: Title of the question as displayed in user interfaces
        text:
          type: string
          description: Long form description about the question
        default_unit:
          type: string
          description: Default unit for measured field when none is specified
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
        path:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL
      required:
      - default_unit
      - path
      - title
    QuestionUpdate:
      type: object
      properties:
        title:
          type: string
          description: Title of the question as displayed in user interfaces
        text:
          type: string
          description: Long form description about the question
        default_unit:
          type: string
          description: Default unit for measured field when none is specified
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
        path:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL
      required:
      - path
    ReportingStatusEnum:
      enum:
      - invited-denied
      - invited
      - updated
      - completed-denied
      - completed-notshared
      - completed
      - verified
      type: string
    RespondentAccount:
      type: object
      properties:
        printable_name:
          type: string
          readOnly: true
          description: Name that can be safely used for display in HTML pages
        picture:
          type: string
          readOnly: true
          description: URL location of the profile picture
      required:
      - picture
      - printable_name
    Sample:
      type: object
      properties:
        campaign:
          allOf:
          - $ref: '#/components/schemas/Campaign'
          readOnly: true
          nullable: true
          description: Campaign this sample is part of
        slug:
          type: string
          readOnly: true
          description: Unique identifier for the sample. It can be used in a URL.
          pattern: ^[-a-zA-Z0-9_]+$
        account:
          type: string
          readOnly: true
          description: Account this sample belongs to
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time of creation (in ISO format)
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time of last update (in ISO format)
        is_frozen:
          type: boolean
          readOnly: true
          description: When True, answers to that sample cannot be updated.
        location:
          type: string
          format: uri
          readOnly: true
          nullable: true
          description: URL at which the response is visible
        grantees:
          type: array
          items: {}
          description: Profiles with which sample was shared
      required:
      - account
      - campaign
      - created_at
      - is_frozen
      - location
      - slug
      - updated_at
    SampleAnswer:
      type: object
      description: Serializer of ``Answer`` when used in list.
      properties:
        path:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL
        title:
          type: string
          description: Short description
        default_unit:
          $ref: '#/components/schemas/Unit'
        ui_hint:
          allOf:
          - $ref: '#/components/schemas/UiHintEnum'
          description: Hint for the user interface on how to present the input field
        required:
          type: boolean
          description: Whether an answer is required or not.
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
      required:
      - default_unit
      - path
    SampleBenchmarks:
      type: object
      description: Benchmarks for one question when used in a list of `Question`.
      properties:
        path:
          type: string
          readOnly: true
          description: Unique identifier that can be used in URL
        title:
          type: string
          description: Short description
        default_unit:
          $ref: '#/components/schemas/Unit'
        ui_hint:
          allOf:
          - $ref: '#/components/schemas/UiHintEnum'
          description: Hint for the user interface on how to present the input field
        benchmarks:
          type: array
          items:
            $ref: '#/components/schemas/Table'
      required:
      - benchmarks
      - default_unit
      - path
    SampleCreate:
      type: object
      properties:
        campaign:
          type: string
          description: Campaign this sample is part of.
    Sequence:
      type: object
      description: Serializes a Sequence object
      properties:
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time the sequence was created (in ISO format)
        slug:
          type: string
          description: Unique identifier that can be used in URL paths
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          description: Title of the sequence
          maxLength: 1024
        account:
          type: string
          readOnly: true
          description: Account that can edit the sequence
        has_certificate:
          type: boolean
          description: True when the sequence ends with a certificate of completion
        extra:
          type: string
          nullable: true
          description: Extra meta data (can be stringify JSON)
      required:
      - account
      - created_at
      - slug
    SequenceCreate:
      type: object
      description: Serializer to create a `Sequence`
      properties:
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time the sequence was created (in ISO format)
        slug:
          type: string
          description: Unique identifier for the sequence
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          description: Title of the sequence
        account:
          type: string
          readOnly: true
          description: Account that can edit the sequence
        has_certificate:
          type: boolean
          description: True when the sequence ends with a certificate of completion
        extra:
          type: string
          nullable: true
          description: Extra meta data (can be stringify JSON)
      required:
      - account
      - created_at
      - title
    SequenceUpdate:
      type: object
      description: Serializer to create a `Sequence`
      properties:
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date/time the sequence was created (in ISO format)
        slug:
          type: string
          description: Unique identifier for the sequence
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          description: Title of the sequence
          maxLength: 1024
        account:
          type: string
          readOnly: true
          description: Account that can edit the sequence
        has_certificate:
          type: boolean
          description: True when the sequence ends with a certificate of completion
        extra:
          type: string
          nullable: true
          description: Extra meta data (can be stringify JSON)
      required:
      - account
      - created_at
    StateEnum:
      enum:
      - grant-initiated
      - grant-accepted
      - grant-denied
      - grant-expired
      - request-initiated
      - request-accepted
      - request-denied
      - request-expired
      type: string
    SystemEnum:
      enum:
      - standard
      - imperial
      - rank
      - enum
      - freetext
      - datetime
      type: string
    Table:
      type: object
      properties:
        slug:
          type: string
          description: Unique key in the table for the data series
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          readOnly: true
          description: Title of data serie that can be safely used for display in
            HTML pages
        extra:
          type: string
          description: Extra meta data (can be stringify JSON)
        values:
          type: array
          items:
            type: array
            items: {}
          description: Datapoints in the serie
      required:
      - slug
      - title
      - values
    UiHintEnum:
      enum:
      - textarea
      - radio
      - checkbox
      - number
      - energy
      - water
      - waste
      - ghg-emissions
      - ghg-emissions-scope3
      type: string
    Unit:
      type: object
      properties:
        slug:
          type: string
          readOnly: true
          description: Unique identifier that can be used in a URL
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          description: Short description suitable for display
          maxLength: 150
        system:
          allOf:
          - $ref: '#/components/schemas/SystemEnum'
          description: One of standard (metric system), imperial, rank, enum, or freetext
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
      required:
      - slug
      - system
      - title
    User:
      type: object
      properties:
        slug:
          type: string
          description: Effectively the username. The variable is named `slug` such
            that front-end code can be re-used between Organization and User records.
          pattern: ^[\w.@+-]+$
        email:
          type: string
          format: email
          readOnly: true
          description: E-mail address for the user
        full_name:
          type: string
          readOnly: true
          description: Full name for the contact (effectively first name followed
            by last name)
        created_at:
          type: string
          format: date-time
          description: Date/time of creation (in ISO format)
        last_login:
          type: string
          format: date-time
          description: Date/time of last login (in ISO format)
      required:
      - email
      - full_name
      - slug
    VerifiedStatusEnum:
      enum:
      - no-review
      - under-review
      - review-completed
      - discrepencies
      - lack-consistency
      - meet-expectations
      - rigorous
      type: string
